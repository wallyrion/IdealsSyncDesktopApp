@using System.Globalization
@using BlazorHybridApp.Core

<table class="table table-striped table-bordered">
    <thead class="table-light">
    <tr>
        <th scope="col">Name</th>
        <th scope="col">Status</th>
        <th scope="col">Sync Path</th>
        <th scope="col">Synced File ID</th>
        <th scope="col">Synced At</th>
        <th scope="col">Actions</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var item in Items)
    {
        <tr>
            <td>@item.Name</td>
            <td>
                @switch (item.Status)
                {
                    case SyncStatus.IncomingSync or SyncStatus.OutgoingSync:
                        <span class="badge bg-warning text-dark">
                            <i class="bi bi-arrow-repeat"></i> In Progress
                        </span>
                        break;
                    case SyncStatus.Synced:
                        <span class="badge bg-success text-light">
                            <i class="bi bi-check-circle"></i> Synced
                        </span>
                        break;
                    case SyncStatus.WaitingForDeletion:
                        <span class="badge bg-danger text-light">
                            <i class="bi bi-trash"></i> Waiting for Deletion
                        </span>
                        break;
                }
            </td>
            <td>@item.SyncPath</td>
            <td>@(item.SyncedFileId.HasValue ? item.SyncedFileId.ToString() : "N/A")</td>
            <td>@(item.SyncedAt.HasValue ? item.SyncedAt.Value.ToString("g", CultureInfo.InvariantCulture) : "N/A")</td>
            <td>
                <button class="btn btn-danger btn-sm" @onclick="() => OnDelete(item)">
                    <i class="bi bi-trash"></i> Delete
                </button>
            </td>
        </tr>
    }
    </tbody>
</table>

@code {
    [Parameter]
    public IEnumerable<LocalFile> Items { get; set; } = [];

    [Parameter]
    public EventCallback<LocalFile> DeleteItem { get; set; }

    private async Task OnDelete(LocalFile item)
    {
        await DeleteItem.InvokeAsync(item);
    }
}
