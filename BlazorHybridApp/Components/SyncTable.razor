@using System.Globalization
@using BlazorHybridApp.Core
@using System.Diagnostics
@using System.Runtime.InteropServices
@using System.Runtime.InteropServices.ComTypes
@using System.Text
@using Microsoft.Win32

<style>
  
</style>

<MudGrid Class="mt-2 pb-3" Justify="Justify.SpaceAround">
    <MudItem>
        <MudPaper MaxWidth="400px" Elevation="0">
            <MudTreeView MaxHeight="88vh" Hover ReadOnly="@ReadOnly" @bind-SelectedValue="SelectedValue" SelectionMode="SelectionMode.SingleSelection">
                <MudTreeViewItem Text="root" Value="@(ParentId.ToString())" Expanded Icon="@Icons.Custom.Uncategorized.Folder" IconExpanded="@Icons.Custom.Uncategorized.FolderOpen">
                    @foreach (var item in Items)
                    {
                        <MudTreeViewItem Icon="@GetFileIcon(item)" CanExpand="@false" Value="@(item.Id.ToString())">
                            <BodyContent >

                                <MudMenu ActivationEvent="@MouseEvent.RightClick">
                                    <ActivatorContent>
                                        @{
                                            var (icon, color, tooltipText, animation) = GetIconStatus(item);
                                        }

                                        <MudTooltip Text="@tooltipText">
                                            <MudIcon Size="Size.Small" Color="@color"
                                                     Class="@(animation + " mr-2")"
                                                     Icon="@icon"></MudIcon>
                                        </MudTooltip>

                                        @item.Name
                                    </ActivatorContent>
                                    <ChildContent>
                                        <MudMenuItem OnClick="@(() => OpenFileAsync(item))">Open</MudMenuItem>
                                        <MudMenuItem OnClick="@(() => ShareFileAsync(item))">Share</MudMenuItem>
                                        <MudMenuItem OnClick="@(() => ShowInFolderAsync(item))">Show in folder</MudMenuItem>
                                        <MudDivider/>
                                        <MudMenuItem OnClick="@(() => DeleteFileAsync(item))">
                                            Delete
                                        </MudMenuItem>

                                    </ChildContent>
                                </MudMenu>

                            </BodyContent>
                        </MudTreeViewItem>
                    }
                </MudTreeViewItem>

            </MudTreeView>
        </MudPaper>
    </MudItem>
    <MudItem>
        <MudPaper Width="500px" Elevation="0">
            @if (SelectedFile != null)
            {
                <MudGrid Justify="Justify.SpaceBetween" Class="pa-2">
                    <MudItem>
                        <MudText Typography="Typo.subtitle1" Class="font-weight-bold">
                            <MudIcon Icon="@GetFileIcon(SelectedFile)"></MudIcon>
                            @SelectedFile?.Name
                        </MudText>
                    </MudItem>
                    <MudItem>
                        <MudText Typography="Typo.body2" Class="text-secondary">
                            @GetFileSize(SelectedFile)
                        </MudText>
                    </MudItem>
                </MudGrid>

            }
      
            @*<MudAlert Severity="Severity.Normal">

            </MudAlert>*@

            <!-- Add a scrollable container for the history -->
            @if (SelectedFile != null)
            {
                <div style="max-height: 80vh; overflow-y: auto;">
                    <MudTable RowStyleFunc="ApplyCurrentVersionRowStyle" Items="@HistoryItems" Dense="true" Hover="true">
                        <ColGroup></ColGroup>
                        <HeaderContent>
                            <MudTh>Modified At</MudTh>
                            <MudTh>Author</MudTh>
                            <MudTh></MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd>
                                @context.ModifiedAt
                            </MudTd>
                            <MudTd>
                                @context.MofifiedBy
                            </MudTd>
                            <MudTd>
                                @if (SelectedFile.CurrentVersion != context.Id)
                                {
                                    <MudTooltip Text="Go to this version">
                                        <MudIconButton Class="p-0" Size="Size.Small" OnClick="() => RevertVersion(context)" Color="MudBlazor.Color.Warning" Icon="@Icons.Material.Filled.CallMissedOutgoing"/>
                                    </MudTooltip>
                                }

                                
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
                </div>

            }
        </MudPaper>
    </MudItem>


</MudGrid>

@*
<MudTabs Elevation="4" Rounded="true" Centered="true" Color="@Color.Primary">
    $1$<MudTabPanel Text="One">

        <table class="table table-striped table-bordered">
            <thead class="table-light">
            <tr>
                <th scope="col">Name</th>
                <th scope="col">Status</th>
                <th scope="col">Synced At</th>
                <th scope="col">Actions</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var item in Items)
            {
                <tr>
                    <td>@item.Name</td>
                    <td>
                        @switch (item.Status)
                        {
                            case SyncStatus.IncomingSync or SyncStatus.OutgoingSync:
                                <span class="badge bg-warning text-dark">
                                    <i class="bi bi-arrow-repeat"></i> In Progress
                                </span>
                                break;
                            case SyncStatus.Synced:
                                <span class="badge bg-success text-light">
                                    <i class="bi bi-check-circle"></i> Synced
                                </span>
                                break;
                            case SyncStatus.WaitingForDeletion:
                                <span class="badge bg-danger text-light">
                                    <i class="bi bi-trash"></i> Waiting for Deletion
                                </span>
                                break;
                        }
                    </td>
                    <td>@(item.SyncedAt.HasValue ? item.SyncedAt.Value.ToString("g", CultureInfo.InvariantCulture) : "N/A")</td>
                    <td>
                        <MudIconButton OnClick="() => OnDelete(item)" Color="Color.Warning" Icon="@Icons.Material.Filled.Delete" />
                    </td>
                </tr>
            }
            </tbody>
        </table>

    </MudTabPanel>#1#

    <MudGrid Class="mt-2" Justify="Justify.SpaceAround">
        <MudItem>
            <MudPaper MaxWidth="400px" Elevation="0">
                <MudTreeView MaxHeight="80vh" Hover ReadOnly="@ReadOnly" @bind-SelectedValue="SelectedValue" SelectionMode="SelectionMode.SingleSelection">
                    <MudTreeViewItem Text="root" Value="@(ParentId.ToString())" Expanded Icon="@Icons.Custom.Uncategorized.Folder" IconExpanded="@Icons.Custom.Uncategorized.FolderOpen">
                        @foreach (var item in Items)
                        {
                            <MudTreeViewItem Icon="@GetFileIcon(item)" CanExpand="@false" Value="@(item.Id.ToString())">
                                <BodyContent >

                                    <MudMenu ActivationEvent="@MouseEvent.RightClick">
                                        <ActivatorContent>
                                            @{
                                                var (icon, color, tooltipText, animation) = GetIconStatus(item);
                                            }

                                            <MudTooltip Text="@tooltipText">
                                                <MudIcon Size="Size.Small" Color="@color"
                                                         Class="@(animation + " mr-2")"
                                                         Icon="@icon"></MudIcon>
                                            </MudTooltip>

                                            @item.Name
                                        </ActivatorContent>
                                        <ChildContent>
                                            <MudMenuItem OnClick="@(() => OpenFileAsync(item))">Open</MudMenuItem>
                                            <MudMenuItem OnClick="@(() => ShareFileAsync(item))">Share</MudMenuItem>
                                            <MudMenuItem OnClick="@(() => ShowInFolderAsync(item))">Show in folder</MudMenuItem>
                                            <MudDivider/>
                                            <MudMenuItem OnClick="@(() => DeleteFileAsync(item))">
                                                Delete
                                            </MudMenuItem>

                                        </ChildContent>
                                    </MudMenu>

                                </BodyContent>
                            </MudTreeViewItem>
                        }
                    </MudTreeViewItem>

                </MudTreeView>
            </MudPaper>
        </MudItem>
        <MudItem>
            <MudPaper Width="500px" Elevation="0">
                <MudAlert Severity="Severity.Normal">                        @SelectedFile?.Name
                </MudAlert>

                <!-- Add a scrollable container for the history -->
                <div style="max-height: 80vh; overflow-y: auto;">
                    <MudTable RowStyleFunc="ApplyCurrentVersionRowStyle" Items="@HistoryItems" Dense="true" Hover="true">
                        <ColGroup></ColGroup>
                        <HeaderContent>
                            <MudTh>Modified At</MudTh>
                            <MudTh>Author</MudTh>
                            <MudTh></MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd>
                                @context.ModifiedAt
                            </MudTd>
                            <MudTd>
                                @context.MofifiedBy
                            </MudTd>
                            <MudTd>
                                <MudTooltip Text="Go to this version">
                                    <MudIconButton OnClick="() => RevertVersion(context)" Color="MudBlazor.Color.Warning" Icon="@Icons.Material.Filled.CallMissedOutgoing"/>
                                </MudTooltip>
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
                </div>
            </MudPaper>
        </MudItem>


    </MudGrid>
    
    $1$<MudTabPanel Text="Two">

        
    </MudTabPanel>#1#
    $1$<MudTabPanel Text="Three">


        <MudTable Items="@Items" Dense="true" Hover="true">
            <ColGroup>
                <col style="width: 40px;"/>
                <col style="width: 50%;"/>
                <col/>
                <col/>
            </ColGroup>
            <HeaderContent>
                <MudTh></MudTh>
                <MudTh>Name</MudTh>
                <MudTh>Size</MudTh>
                <MudTh>Status</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>
                    <MudIcon Icon="@GetFileIcon(context.Name)"/>
                </MudTd>
                <MudTd>@context.Name</MudTd>
            </RowTemplate>
        </MudTable>

        <div class="d-flex flex-wrap gap-4 pa-4">
            @foreach (var file in Items)
            {
                <MudPaper @key="file.Name"
                          Class="relative"
                          Width="180px"
                          Height="200px"
                          Elevation="2">
                    <div class="d-flex flex-column align-center pa-4 h-100">
                        <MudIcon Icon="@GetFileIcon(file.Name)"
                                 Size="Size.Large"
                                 Class="mb-2"/>

                        <MudText Typo="Typo.body1"
                                 Class="text-center text-truncate px-2"
                                 Style="max-width: 160px;">
                            @file.Name
                        </MudText>

                        $2$ <div class="mt-auto"> #2#
                        $2$     <MudChip Size="Size.Small"  #2#
                        $2$              Color="@GetStatusColor(file.Status)" #2#
                        $2$               Label="true"> #2#
                        $2$         @file.Status #2#
                        $2$     </MudChip> #2#
                        $2$ </div> #2#

                        <MudMenu Icon="@Icons.Material.Filled.MoreVert"
                                 Dense="true"
                                 Class="absolute top-0 right-0 pa-2">
                            <MudMenuItem OnClick="@(() => OpenFileAsync(file))">Open</MudMenuItem>
                            <MudMenuItem OnClick="@(() => ShareFileAsync(file))">Share</MudMenuItem>
                            <MudMenuItem OnClick="@(() => ShowInFolderAsync(file))">Show in folder</MudMenuItem>
                            <MudDivider/>
                            <MudMenuItem OnClick="@(() => DeleteFileAsync(file))"
                                         Class="text-error">
                                Delete
                            </MudMenuItem>
                        </MudMenu>
                    </div>
                </MudPaper>
            }
        </div>
    </MudTabPanel>#1#
</MudTabs>
*@


@*<MudPaper Width="300px" Elevation="0">
    <MudTreeView Hover ReadOnly="@ReadOnly" @bind-SelectedValue="SelectedValue" SelectionMode="SelectionMode.SingleSelection">
        <MudTreeViewItem Value="@("root")" Expanded Icon="@Icons.Custom.Uncategorized.Folder" IconExpanded="@Icons.Custom.Uncategorized.FolderOpen">
            @foreach (var item in Items)
            {
                <MudTreeViewItem Value="@(item.Id.ToString())" Text="item.Name" Icon="@Icons.Custom.FileFormats.FileCode"/>
            }
        </MudTreeViewItem>

    </MudTreeView>
</MudPaper>*@


@code {
    static readonly Guid ParentId = Guid.NewGuid();
    public string? SelectedValue;
    public LocalFile? SelectedFile => SelectedValue != null ? Items.FirstOrDefault(i => i.Id == Guid.Parse(SelectedValue)) : null;

    public bool ReadOnly = false;

    List<FileHistoryItem> HistoryItems => SelectedFile?.History ?? [];

    private string ApplyCurrentVersionRowStyle(FileHistoryItem item, int index)
    {
        if (SelectedFile?.CurrentVersion != item.Id)
        {
            return "";
        }

        return "background: #93f6a4";
    }
    

    [Parameter]
    public IEnumerable<LocalFile> Items { get; set; } = [];

    [Parameter]
    public EventCallback<LocalFile> DeleteItem { get; set; }

    private async Task OnDelete(LocalFile item)
    {
        await DeleteItem.InvokeAsync(item);
    }

    private async Task RevertVersion(FileHistoryItem historyItem)
    {
        await OnRevertVersion.InvokeAsync(historyItem);
    }

    public static string GetFileIcon(LocalFile file)
    {
        
        string extension = Path.GetExtension(file.Name).ToLowerInvariant();

        return extension switch
        {
            ".pdf" => Icons.Custom.FileFormats.FilePdf,
            ".doc" or ".docx" or "txt" => Icons.Custom.FileFormats.FileDocument,
            ".xls" or ".xlsx" => Icons.Custom.FileFormats.FileExcel,
            ".jpg" or ".jpeg" or ".png" or ".gif" => Icons.Custom.FileFormats.FileImage,
            ".mp4" or ".avi" or ".mov" => Icons.Custom.FileFormats.FileVideo,
            ".mp3" or ".wav" or ".ogg" => Icons.Custom.FileFormats.FileMusic,
            ".zip" or ".rar" or ".7z" => Icons.Custom.Uncategorized.Folder,
            _ => Icons.Custom.FileFormats.FileCode
            };
    }
    
    public static string GetFileSize(LocalFile file)
    {
        // Find the current version of the file in the history
        var historyItem = file.History.FirstOrDefault(x => x.Id == file.CurrentVersion);

        if (historyItem == null || historyItem.Content == null)
        {
            return "Unknown size";
        }

        // Get the size of the content in bytes
        long sizeInBytes = historyItem.Content.Length;

        // Convert size to a human-readable format
        return ConvertSizeToReadableFormat(sizeInBytes);
    }

    private static string ConvertSizeToReadableFormat(long sizeInBytes)
    {
        string[] sizeUnits = { "B", "KB", "MB", "GB", "TB" };
        double size = sizeInBytes;
        int unitIndex = 0;

        while (size >= 1024 && unitIndex < sizeUnits.Length - 1)
        {
            size /= 1024;
            unitIndex++;
        }

        // Use no decimal places for whole numbers, and two for fractional sizes
        return size % 1 == 0 
            ? $"{(int)size} {sizeUnits[unitIndex]}" 
            : $"{size:F2} {sizeUnits[unitIndex]}";
    }


    /*public static Color GetStatusColor(SyncStatus status)
    {
        return status switch
        {
            SyncStatus.Synced => Color.Success,
            SyncStatus.IncomingSync => Color.Tertiary,
            SyncStatus.OutgoingSync => Color.Secondary,
            SyncStatus.WaitingForDeletion => Color.Warning,
            _ => Color.Default
            };
    }*/

    [Parameter]
    public List<LocalFile> Files { get; set; } = new();


    [Parameter]
    public EventCallback<FileHistoryItem> OnRevertVersion { get; set; }

    [Parameter]
    public EventCallback<LocalFile> OnOpen { get; set; }

    [Parameter]
    public EventCallback<LocalFile> OnShare { get; set; }

    [Parameter]
    public EventCallback<LocalFile> OnShowInFolder { get; set; }

    [Parameter]
    public EventCallback<LocalFile> OnMudDelete { get; set; }

    private async Task OpenFileAsync(LocalFile file)
    {
        Process.Start("explorer.exe", file.FullPath);
        await OnOpen.InvokeAsync(file);
    }

    private async Task ShareFileAsync(LocalFile file)
    {
        await RegisterContextMenu();
        await OnShare.InvokeAsync(file);
    }

    private async Task ShowInFolderAsync(LocalFile file)
    {
        try
        {
            string argument = $"/select,\"{file.FullPath}\"";
            var process = new Process
            {
                StartInfo = new ProcessStartInfo
                {
                    FileName = "explorer.exe",
                    Arguments = argument,
                    UseShellExecute = true
                }
            };
            process.Start();
        }
        catch (Exception ex)
        {
            // Handle any potential exceptions
            Console.WriteLine($"An error occurred while trying to open the folder: {ex.Message}");
        }
    }

    private async Task DeleteFileAsync(LocalFile file)
    {
        await OnMudDelete.InvokeAsync(file);
    }
    
    public async Task RegisterContextMenu()
    {
        try
        {
            /*var regCommands = new[]
            {
    // Register the application as a handler for .txt files
                $"reg add \"HKCU\\Software\\Classes\\.txt\" /ve /t REG_SZ /d \"txtfile\" /f",
                
                $"reg add \"HKCU\\Software\\Classes\\txtfile\\shell\\YourApp\" /v \"Icon\" /t REG_SZ /d \"\\\"{Process.GetCurrentProcess().MainModule.FileName}\\\"\" /f",
    // Add your app to the context menu
                $"reg add \"HKCU\\Software\\Classes\\txtfile\\shell\\open\" /ve /t REG_SZ /d \"Open with Ideals...\" /f",
                $"reg add \"HKCU\\Software\\Classes\\txtfile\\shell\\YourApp\" /ve /t REG_SZ /d \"Open with Ideals...\" /f",
                $"reg add \"HKCU\\Software\\Classes\\txtfile\\shell\\open\\command\" /ve /t REG_SZ /d \"\\\"{Process.GetCurrentProcess().MainModule.FileName}\\\" \\\"%1\\\"\" /f",
                $"reg add \"HKCU\\Software\\Classes\\txtfile\\shell\\YourApp\\command\" /ve /t REG_SZ /d \"\\\"{Process.GetCurrentProcess().MainModule.FileName}\\\" \\\"%1\\\"\" /f",
            };*/

            string exePath = Process.GetCurrentProcess().MainModule.FileName;
            string icoPath = Path.Combine(Path.GetDirectoryName(exePath), "ideals.ico");
            
             var regCommands = new[]
             {
                // Directory
                $""""
                 reg add "HKCU\Software\Classes\Directory\shell\YourApp" /v "" /t REG_SZ /d "Sync with ideals" /f 
                 
                 """", 
                $""""
                 reg add "HKCU\Software\Classes\Directory\shell\YourApp\command" /v "" /t REG_SZ /d "\"{exePath}\" \"%1\"" /f ,
                 """",

                $""""
                 reg add "HKCU\Software\Classes\Directory\shell\YourApp" /v "Icon" /t REG_SZ /d "{icoPath}" /f 
                 
                 """"
                 
             };

            foreach (var cmd in regCommands)
            {
                using var process = Process.Start(new ProcessStartInfo
                {
                    FileName = "cmd.exe",
                    Arguments = $"/c {cmd}",
                    CreateNoWindow = true,
                    UseShellExecute = false
                });
            
                await process.WaitForExitAsync();
            }
        
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"Failed to register context menu: {ex.Message}");
        }
    }

    private (string, Color, string tooltip, string animationClass) GetIconStatus(LocalFile item)
    {
        return item.Status switch
        {
            SyncStatus.OutgoingSync => (Icons.Material.Filled.Upgrade, Color.Primary, "Uploading to server", "bounce-up"),
            SyncStatus.IncomingSync => (Icons.Material.Filled.VerticalAlignBottom, Color.Primary, "Downloading from server", "bounce-down"),
            SyncStatus.Synced => (Icons.Material.Filled.Verified, Color.Success, "Successfully synced", "synced"),
            SyncStatus.WaitingForDeletion => (Icons.Material.Filled.Cancel, Color.Error, "Waiting for removal", "blink"),
            _ => throw new ArgumentOutOfRangeException()
        };
    }

}