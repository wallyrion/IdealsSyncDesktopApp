@page "/"
@using BlazorHybridApp.Core
@using CommunityToolkit.Maui.Storage
@inject FileSyncService FileSyncService
@inject ExplorerService ExplorerService
@inject UserSettingsProvider UserSettingsProvider
@inject IFolderPicker FolderPicker
@inject State State
@inject BackgroundTest BackgroundTest


@implements IDisposable

@*<button class="btn btn-primary" @onclick="PickFolder">Select Folder</button>*@
@*<button @onclick="TriggerSync">Trigger Sync</button>*@

@if (!string.IsNullOrEmpty(SelectedPath))
{
    @*<div class="alert alert-info m-1">
        @SelectedPath
    </div>*@
}

<SyncExplorer></SyncExplorer>

@code {
    private string? SelectedPath;

    private async Task PickFolder()
    {

        var result = await FolderPicker.PickAsync();

        if (result.Folder is null)
        {
            return;
        }

        SelectedPath = result.Folder.Path;
        await UserSettingsProvider.SelectNewSyncPathAsync(SelectedPath);
    }

    async void Changed()
    {
        /*SelectedPath = await FolderSelector.RetrieveAndStoreSyncPath();
        await InvokeAsync(StateHasChanged);*/
    }
    
    protected override async Task OnInitializedAsync()
    {
        State.SyncStatusChanged += Changed;
        //SelectedPath = await FolderSelector.RetrieveAndStoreSyncPath();

        Task.Run(async () => { await BackgroundTest.StartAsync(); });
    }

    public void Dispose()
    {
        State.SyncStatusChanged -= Changed;
    }

}